[["reactivity.html", "Chapter 5 Reactivity 5.1 Reactive expressions save recomputation", " Chapter 5 Reactivity In Section 3, we mentioned that the Shiny server logic is based on reactive programming. The server takes input from the UI, runs the code chunks defined within, generates output and sends it to the UI. When you change the input, the server re-runs the code chunks and sends the updated output to the UI. Consider the following example. The UI takes a single text input i.e. name of a person. The server concatenates the input string with “Hello” at the start and, “!” at the end and returns this string to the UI. ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { output$greeting &lt;- renderText({ paste0(&quot;Hello &quot;, input$name, &quot;!&quot;) }) } Challenge 3: Modify greeting.R to print the reverse Open ShinyApps/reactive/greeting.R and edit the file to print reverse of the input name. The new app should print the following: Hello Batman! The reverse of your name is: namtaB 5.1 Reactive expressions save recomputation Example of a reactive expression library(shiny) y &lt;- reactive(input$x + 1) # or y &lt;- reactive({ input$x + 1 }) # or y &lt;- reactive({ return(input$x + 1) }) Reactivity explained using Pythagoras calculation: We have used browser() calls to debug the function ui_pythagorus &lt;- fluidPage( titlePanel(&quot;Hypotenuse app&quot;), sliderInput(&quot;a&quot;, &quot;Length a&quot;, 0, 10, 5), sliderInput(&quot;b&quot;, &quot;Length b&quot;, 0, 10, 5), textOutput(&quot;result&quot;)) server_pythagorus &lt;- function(input, output, server) { a2 &lt;- reactive({ cat(&quot;Compute a squared.\\n&quot;) input$a ** 2 }) browser() b2 &lt;- reactive({ cat(&quot;Compute b squared.\\n&quot;) input$b ** 2 }) browser() output$result &lt;- renderText({ cat(&quot;Compute hypotenuse.\\n&quot;) h &lt;- sqrt(a2() + b2()) cat(&quot;Done computing hypotenuse.\\n&quot;) paste0(&quot;The hypotenuse is &quot;, h) }) browser() } Now, we run the function server_pythagorus() "]]
